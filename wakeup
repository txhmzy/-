
#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);  // HW SPI Com: CS = 10, A0 = 9 (Hardware Pins are  SCK = 13 and MOSI = 11)
#define buzzer_pin 10 //定义蜂鸣器驱动引脚
int pushButton = 6; //传感器接senhub D6接口
#define BuzzerPin6 10
int tone_list[] = {262, 294, 330, 349, 392, 440, 494, 523, 587, 659, 698, 784, 880, 988, 1046, 1175, 1318, 1397, 1568, 1760, 1967};
int music_1[] = {12, 10, 12, 10, 12, 10, 9, 10, 12, 12, 12, 10, 13, 12, 10, 12, 10, 9, 8, 9, 10, 12, 10, 9, 8, 9, 10, 0};
float rhythm_1[] = {1, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 2, 0.5, 1, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 2};
int music_2[] = {8, 9, 10, 8, 8, 9, 10, 8, 10, 11, 12, 10, 11, 12, 0};
float rhythm_2[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2};
int music_3[] = {5, 8, 8, 10, 13, 10, 12, 12, 13, 12, 10, 11, 10, 9, 6, 9, 9, 11, 14, 14, 13, 12, 11, 11, 10, 6, 7, 8, 9, 0};
float rhythm_3[] = {0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 1, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 1, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 1, 0.5, 0.25, 0.5, 1, 0.5, 3};
int music_4[] = {5,5,6,5,8,7,5,5,6,5,9,8,5,5,12,10,8,7,6,11,11,10,8,9,8,0};
float rhythm_4[] = {0.5,0.5,1,1,1,2,0.5,0.5,1,1,1,2,0.5,0.5,1,1,1,1,1,0.5,0.5,1,1,1,3}; 
int music_5[] = {12, 13, 12, 13, 12, 13, 12, 12, 15, 14, 13, 12, 13, 12, 12, 12, 10, 10, 12, 12, 10, 9, 11, 10, 9, 8, 9, 8, 0};
float rhythm_5[] = {0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1};
int music_6[] = {8, 8, 10, 8, 8, 10, 22, 13, 13, 13, 12, 13, 12, 8, 10, 22, 15, 13, 13, 12, 13, 12, 8, 9, 22, 14, 14, 12, 10, 12, 0}; 
float rhythm_6[] = {1, 1, 2, 0.5, 1, 1, 1, 1, 1, 0.5, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 2, 0.5, 1, 1, 1, 1, 0.5, 0.5, 1, 4};
int music_7[] = {6, 8, 9, 10, 12, 10, 8, 9, 6, 22, 8, 9, 10, 12, 12, 13, 9, 10, 22, 10, 12, 13, 12, 13, 15, 14, 13, 12, 13, 10, 8, 9, 10, 12, 8, 6, 8, 9, 10, 13, 12, 0}; 
float rhythm_7[] = {0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1, 2, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 1, 1, 2, 1, 0.5, 0.5, 2, 1, 0.5, 0.5, 0.25, 0.25, 0.5, 0.5, 1, 0.5, 0.5, 1, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 3};
int music_8[] = {10, 8, 9, 6, 10, 9, 8, 9, 6, 10, 8, 9, 9, 12, 10, 7, 8, 8, 7, 6, 7, 8, 9, 5, 13, 12, 10, 10, 9, 8, 9, 10, 9, 10, 9, 12, 12, 12, 12, 12, 12, 0};
float rhythm_8[] = {1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 2, 1, 1, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 0.5, 1};
int music_9[] = {10,12,15,13,12,10,12,13,15,12,15,17,16,15,16,15,13,15,12,0};
float rhythm_9[] = {0.5,0.5,0.5,0.5,2,0.5,0.5,0.5,0.5,2,1,0.5,1,1,0.5,0.5,0.5,0.5,2};
int music_10[] = {10,10,10,8,5,5,22,10,10,10,8,10,22,12,12,10,8,5,5,5,6,7,8,10,9,0};
float rhythm_10[] = {0.5,0.5,0.5,0.5,1,0.5,0.5,0.5,0.5,0.5,0.5,1,1,0.5,0.5,0.5,0.5,0.5,0.5,1,0.5,0.5,0.5,0.5,1};  


// the setup routine runs once when you press reset:
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
  // make the pushbutton's pin an input:
  pinMode(pushButton, INPUT);
   pinMode(buzzer_pin,OUTPUT);
}
static unsigned char u8g_logo_bits3[] U8G_PROGMEM = {

0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF9,0xFF,0xFF,0xFF,0xF1,0xFF,0xFF,
0xFF,0xF9,0xFF,0xFF,0xFF,0xF9,0xFF,0xFB,0xFF,0xB9,0x03,0xF0,0x0F,0x00,0xFF,0xF3,
0xFF,0xF9,0xFF,0xF3,0xFF,0xF9,0xFF,0xF3,0xFF,0xF9,0xFF,0xF3,0xFF,0xF9,0xFF,0xF3,
0xFF,0x79,0xFB,0xF3,0x03,0x00,0x00,0xF0,0xFF,0xFB,0xF3,0xF3,0xFF,0xF3,0xF3,0xFF,
0xFF,0xFB,0xF3,0xFF,0x9F,0xFB,0xF3,0xFF,0x9F,0xFB,0xF3,0xEF,0xDF,0x3B,0xF3,0xEF,
0xCF,0x03,0xF2,0xEF,0xCF,0xFB,0xF3,0xEF,0xCF,0xFB,0xF3,0xCF,0xCF,0xFB,0xE3,0xC7,
0xAF,0xFB,0x07,0xE0,0x6F,0xFA,0xFF,0xFF,0xE7,0xF8,0xFF,0xFF,0xF7,0xE3,0xFF,0xFF,
0xFB,0x0F,0xF0,0x87,0xFB,0x7F,0x00,0xE0,0xFD,0xFF,0x3F,0xF0,0xFF,0xFF,0xFF,0xFF,//起0
};

static unsigned char u8g_logo_bits4[] U8G_PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xFF,
0xFF,0xFF,0xF8,0xFF,0xEF,0xFF,0xF9,0xE7,0x0F,0x00,0x00,0xC0,0xCF,0xFF,0xFF,0xFF,
0xCF,0xFF,0xFE,0xFF,0xCF,0xFF,0xF9,0xFF,0xCF,0xFF,0xF9,0xFF,0xCF,0xFF,0xFD,0xFF,
0xCF,0xFF,0xFD,0xFF,0xCF,0xFF,0xFD,0xF3,0x0F,0x00,0x00,0xE0,0xCF,0x7F,0xF4,0xFF,
0xCF,0x3F,0xF5,0xFF,0xCF,0x3F,0xE5,0xFF,0xCF,0x9F,0xED,0xFF,0xCF,0xDF,0xCD,0xFF,
0xEF,0xCF,0x9D,0xFF,0xEF,0xE7,0x9D,0xFF,0xEF,0xF3,0x3D,0xFF,0xE7,0xFB,0x7D,0xFC,
0xF7,0xFD,0xFD,0xF8,0xF7,0xFE,0xFD,0xE1,0x77,0xFF,0xFD,0xC3,0xBB,0xFF,0xFD,0xF7,
0xDB,0xFF,0xFD,0xFF,0xFD,0xFF,0xFD,0xFF,0xFF,0xFF,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,//床1
};
static unsigned char u8g_logo_bits1[] U8G_PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0x7F,0xF8,0xFF,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7D,0xFE,0xFF,0xFF,0x71,0xDE,0xFF,
0xFF,0x79,0xBE,0xFF,0xFF,0x78,0x7E,0xFF,0xFF,0x7C,0x7E,0xFE,0x7F,0x7E,0xFE,0xFC,
0x7F,0x7E,0xFE,0xF9,0x3F,0x7F,0xFE,0xF1,0xBF,0x7F,0xFE,0xE3,0x9F,0x7F,0xFE,0xE3,
0xCF,0x7F,0xFE,0xE7,0xEF,0x7F,0xFE,0xE7,0xF7,0x7F,0xFE,0xEF,0xFB,0x7F,0xFE,0xFF,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x73,0xFE,0xFF,
0xFF,0x0F,0xFE,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,//小0


};
static unsigned char u8g_logo_bits2[] U8G_PROGMEM = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,
0x3F,0x00,0x00,0xF8,0xFF,0xFF,0x7F,0xF0,0xFF,0xFF,0x3F,0xFE,0xFF,0xFF,0x9F,0xFF,
0xFF,0xFF,0xCF,0xFF,0xFF,0xFF,0xF3,0xFF,0xFF,0x7F,0xF9,0xFF,0xFF,0x7F,0xFC,0xFF,
0xFF,0x7F,0xFC,0xFF,0xFF,0x7F,0xFE,0xF7,0xFF,0x7F,0xFE,0xE3,0x03,0x00,0x00,0xC0,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,
0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x7B,0xFE,0xFF,
0xFF,0x07,0xFE,0xFF,0xFF,0x1F,0xFF,0xFF,0xFF,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,//子1
};
// the loop routine runs over and over again forever:
void draw(void) {
  u8g.setFont(u8g_font_7x14);
  u8g.setPrintPos(0, 64); 
  u8g.drawXBMP( 0, 18, 32, 32, u8g_logo_bits1);
  u8g.drawXBMP( 32, 18, 32, 32, u8g_logo_bits2);
  u8g.drawXBMP( 64, 18, 32, 32, u8g_logo_bits3);
   u8g.drawXBMP( 96, 18, 32, 32, u8g_logo_bits4);
}


// the loop routine runs over and over again forever:
void loop() {
  // read the input pin:
  int buttonState = digitalRead(pushButton);
  // print out the state of the button:
  Serial.println(buttonState);
  delay(1);        // delay in between reads for stability
  if(buttonState == 0)
  {
     u8g.firstPage();  
  do {
      draw();
     } 
  while( u8g.nextPage() );
 for (int a = 0; music_8[a] != 0; a++)
 {     
    if (music_8[a] != 22) 
    {      
      tone(BuzzerPin6, tone_list[music_8[a] - 1]);   
      }   
      else
      {     
        noTone(BuzzerPin6);   
        }     
        delay(rhythm_8[a] * 300);   
        noTone(BuzzerPin6);  
        delay(30);  
        }   
        delay(1000); 
        noTone(BuzzerPin6);
  }
}
